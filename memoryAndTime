// src/test/java/.../CriteriaUseCasePerfTest.java
package your.pkg;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import org.moditect.jfrunit.EnableEvent;
import org.moditect.jfrunit.JfrEventTest;
import org.moditect.jfrunit.JfrEvents;

import jdk.jfr.consumer.RecordedEvent;

import java.time.Duration;
import java.util.List;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;
import static org.mockito.Mockito.*;

// ‚¨áÔ∏è –ù–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç JfrUnit: –∫–ª–∞—Å—Å –ø–æ–º–µ—á–∞–µ–º @JfrEventTest –∏ —Ö—Ä–∞–Ω–∏–º –ø–æ–ª–µ JfrEvents
@JfrEventTest
class CriteriaUseCasePerfTest {

  // JfrUnit —Å–∞–º —Å—Ç–∞—Ä—Ç—É–µ—Ç/–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å; –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏–π
  public final JfrEvents jfrEvents = new JfrEvents();

  private EmployeePort employeePort;
  private WorkloadPort workloadPort;
  private CriteriaUseCase useCase;

  @BeforeEach
  void setUp() {
    employeePort = mock(EmployeePort.class);
    workloadPort = mock(WorkloadPort.class);
    useCase = new CriteriaUseCase(employeePort, workloadPort); // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–æ—Ä—Ç–∞–º–∏

    // ‚úÖ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–∫–∏ ‚Äî ¬´–≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ¬ª
    when(employeePort.findEmployee(Set.of("e1", "e2")))
        .thenReturn(List.of(
            new EmployeePort.EmployeeDto("e1", true),
            new EmployeePort.EmployeeDto("e2", true)
        ));

    when(workloadPort.findEmployeeWorkload(Set.of("e1", "e2")))
        .thenReturn(List.of(
            new WorkloadPort.WorkloadDto("e1", 2L),
            new WorkloadPort.WorkloadDto("e2", 4L)
        ));
  }

  @Test
  @EnableEvent("jdk.ObjectAllocation*") // –≤–∫–ª—é—á–∞–µ—Ç InNewTLAB –∏ OutsideTLAB –æ–¥–Ω–∏–º –º–∞—Ö–æ–º
  @Timeout(10) // ¬´—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞¬ª –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã —Ç–µ—Å—Ç –Ω–µ –∑–∞–≤–∏—Å–∞–ª –≤ CI
  void calculate_bitl_time_and_memory() {
    var initial = Set.of(
        CandidateDto.builder().employeeId("e1").score(0).build(),
        CandidateDto.builder().employeeId("e2").score(0).build()
    );
    var request = new CalculateRequest(new CalculateRequest.Context(true)); // isBitl = true

    // üîÑ –ß–∏—Å—Ç–∏–º –±—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –∑–∞–º–µ—Ä–æ–º ‚Äî –≤–æ–∑—å–º—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ
    jfrEvents.reset();

    // ‚è±Ô∏è –í—Ä–µ–º—è: –∑–∞–º–µ—Ä—è–µ–º –Ω–∞ –ø–∞—á–∫–µ –∏—Ç–µ—Ä–∞—Ü–∏–π (—É—Å–∏–ª–∏–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª)
    final int N = 50;
    long started = System.nanoTime();
    assertTimeoutPreemptively(Duration.ofSeconds(2), () -> { // –∫–æ—Ä–æ—Ç–∫–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ
      for (int i = 0; i < N; i++) {
        useCase.calculate(initial, request);
      }
    });
    long elapsedMs = (System.nanoTime() - started) / 1_000_000;

    // ‚è≥ –î–æ–∂–∏–¥–∞–µ–º—Å—è, –ø–æ–∫–∞ JFR ¬´–¥–æ–ª—å—ë—Ç¬ª —Å–æ–±—ã—Ç–∏—è
    jfrEvents.awaitEvents(); // —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API

    // üíæ –ü–∞–º—è—Ç—å: —Å—É–º–º–∏—Ä—É–µ–º –±–∞–π—Ç—ã –∞–ª–ª–æ–∫–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –Ω–∞—à–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    String thisThread = Thread.currentThread().getName();
    long allocatedBytes = jfrEvents
        .filter(this::isAllocationEvent)                          // –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ ObjectAllocation-—Å–æ–±—ã—Ç–∏—è
        .filter(e -> thisThread.equals(e.getThread().getJavaName())) // —Ç–æ–ª—å–∫–æ –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
        .mapToLong(this::allocationSize)                             // –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è —É —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        .sum();

    // ‚úÖ –ù–µ—Å—Ç—Ä–æ–≥–∏–µ, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã (–ª–æ–≤—è—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã –≤ CI):
    assertThat(elapsedMs)
        .as("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è %d –∏—Ç–µ—Ä–∞—Ü–∏–π, –º—Å", N)
        .isLessThan(2000); // –ø–æ–¥–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç –ø–æ–¥ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç/CI
    assertThat(allocatedBytes)
        .as("–°—É–º–º–∞—Ä–Ω—ã–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏ –∑–∞ %d –∏—Ç–µ—Ä–∞—Ü–∏–π, –±–∞–π—Ç", N)
        .isLessThan(50_000_000L); // –º—è–≥–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫, –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  }

  // ‚Äî‚Äî‚Äî helpers ‚Äî‚Äî‚Äî

  // –°–∏–≥–Ω–∞–ª–∏–º —Ç–æ–ª—å–∫–æ –ø–æ –Ω—É–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º JFR
  private boolean isAllocationEvent(RecordedEvent e) {
    String name = e.getEventType().getName();
    return "jdk.ObjectAllocationInNewTLAB".equals(name)
        || "jdk.ObjectAllocationOutsideTLAB".equals(name);
  }

  // ‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç JFR: —É InNewTLAB ‚Äî –ø–æ–ª–µ tlabSize, —É OutsideTLAB ‚Äî allocationSize
  // –ò—Å—Ç–æ—á–Ω–∏–∫: –ø—Ä–∏–º–µ—Ä —Å —Å—É–º–º–æ–π –∞–ª–ª–æ–∫–∞—Ü–∏–π –≤ —Å—Ç–∞—Ç—å–µ InfoQ –ø—Ä–æ JfrUnit.  [oai_citation:1‚Ä°InfoQ](https://www.infoq.com/news/2021/09/jfrunit-flight-recorder-events/)
  private long allocationSize(RecordedEvent e) {
    String name = e.getEventType().getName();
    return "jdk.ObjectAllocationInNewTLAB".equals(name)
        ? e.getLong("tlabSize")
        : e.getLong("allocationSize");
  }
}
