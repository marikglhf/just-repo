–ö—Ä—É—Ç–∞—è –∏–¥–µ—è ‚Äî –∞—Ä—Ö—Ç–µ—Å—Ç—ã –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞—é—Ç –¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–∏ –≤ —É–∑–¥–µ üëç
–ù–∏–∂–µ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, –Ω–æ ¬´–±–æ–µ–≤–æ–π¬ª –Ω–∞–±–æ—Ä ArchUnit-—Ç–µ—Å—Ç–æ–≤ –¥–ª—è Spring 3.4.x + Kotlin 2.0.x + Gradle (JUnit 5).

1) –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Gradle

// build.gradle.kts (root –∏–ª–∏ –º–æ–¥—É–ª—è —Å –∫–æ–¥–æ–º)
dependencies {
    testImplementation(kotlin("test"))          // –∏–ª–∏ junit-jupiter
    testImplementation("com.tngtech.archunit:archunit-junit5:1.3.0")
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≥–æ—Ç–æ–≤—ã–µ –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
    testImplementation("com.tngtech.archunit:archunit:1.3.0")
}
tasks.test {
    useJUnitPlatform()
}

2) –û–∂–∏–¥–∞–µ–º–∞—è —Å–ª–æ–∏—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤

(–ü–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ–π root-–ø–∞–∫–µ—Ç)

com.example.myapp
 ‚îú‚îÄ config
 ‚îú‚îÄ controller     (@RestController, @ControllerAdvice)
 ‚îú‚îÄ service        (@Service)
 ‚îú‚îÄ repository     (@Repository, Spring Data)
 ‚îú‚îÄ domain         (entities, –∞–≥—Ä–µ–≥–∞—Ç—ã, value objects)
 ‚îî‚îÄ util           (–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã)

3) –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª (Kotlin + JUnit 5)

–°–æ–∑–¥–∞–π —Ñ–∞–π–ª src/test/kotlin/com/example/myapp/ArchitectureTest.kt:

package com.example.myapp

import com.tngtech.archunit.core.domain.JavaClasses
import com.tngtech.archunit.core.importer.ClassFileImporter
import com.tngtech.archunit.junit.AnalyzeClasses
import com.tngtech.archunit.junit.ArchTest
import com.tngtech.archunit.junit.ArchUnitRunner
import com.tngtech.archunit.library.Architectures.layeredArchitecture
import com.tngtech.archunit.lang.syntax.ArchRuleDefinition.*
import com.tngtech.archunit.library.GeneralCodingRules
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.TestInstance
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.RestController
import org.springframework.stereotype.Service
import org.springframework.stereotype.Repository
import org.springframework.beans.factory.annotation.Autowired

/**
 * –£–∫–∞–∂–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–∫–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
private const val ROOT = "com.example.myapp"

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class ArchitectureTest {

    private lateinit var classes: JavaClasses

    @BeforeAll
    fun loadClasses() {
        classes = ClassFileImporter().importPackages(ROOT)
    }

    // --- 3.1 –°–ª–æ–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
    @ArchTest
    fun layeredArchitecture_isRespected() {
        val rule = layeredArchitecture()
            .consideringAllDependencies()
            .layer("Controller").definedBy("$ROOT.controller..")
            .layer("Service").definedBy("$ROOT.service..")
            .layer("Repository").definedBy("$ROOT.repository..")
            .layer("Domain").definedBy("$ROOT.domain..")
            // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
            .whereLayer("Controller").mayOnlyAccessLayers("Service", "Domain")
            .whereLayer("Service").mayOnlyAccessLayers("Repository", "Domain")
            .whereLayer("Repository").mayOnlyAccessLayers("Domain")
            .whereLayer("Domain").mayNotAccessAnyLayer()

        rule.check(classes)
    }

    // --- 3.2 –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –Ω–µ –ª–µ–∑—É—Ç –ø—Ä—è–º–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ---
    @ArchTest
    fun controllers_should_not_access_repositories() =
        noClasses().that()
            .resideInAPackage("$ROOT.controller..")
            .should().accessClassesThat().resideInAPackage("$ROOT.repository..")
            .because("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –æ–±—â–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã")
            .check(classes)

    // --- 3.3 –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ ¬´—Å–≤–æ–∏—Ö¬ª –ø–∞–∫–µ—Ç–∞—Ö ---
    @ArchTest
    fun restControllers_should_reside_in_controller_package() =
        classes().that().areAnnotatedWith(RestController::class.java)
            .should().resideInAPackage("$ROOT.controller..").check(classes)

    @ArchTest
    fun services_should_reside_in_service_package() =
        classes().that().areAnnotatedWith(Service::class.java)
            .should().resideInAPackage("$ROOT.service..").check(classes)

    @ArchTest
    fun repositories_should_reside_in_repository_package() =
        classes().that().areAnnotatedWith(Repository::class.java)
            .should().resideInAPackage("$ROOT.repository..").check(classes)

    // --- 3.4 –ó–∞–ø—Ä–µ—â–∞–µ–º field injection ---
    @ArchTest
    fun no_field_injection() =
        noFields().should().beAnnotatedWith(Autowired::class.java)
            .because("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–Ω—É—é –∏–Ω—ä–µ–∫—Ü–∏—é").check(classes)

    // --- 3.5 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ —Å–ª–æ—ë–≤ ---
    @ArchTest
    fun no_cycles_between_layer_packages() =
        com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices()
            .matching("$ROOT.(controller|service|repository|domain).(*)..")
            .namingSlices("–ü–æ–¥–ø–∞–∫–µ—Ç '$2' –≤–Ω—É—Ç—Ä–∏ '$1'")
            .should().beFreeOfCycles()
            .check(classes)

    // --- 3.6 –û–±—â–∏–µ –∞–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω—ã ---
    @ArchTest
    fun general_coding_rules() {
        GeneralCodingRules.NO_CLASSES_SHOULD_USE_FIELD_INJECTION.check(classes)
        GeneralCodingRules.NO_CLASSES_SHOULD_ACCESS_STANDARD_STREAMS.check(classes)
        GeneralCodingRules.NO_CLASSES_SHOULD_THROW_GENERIC_EXCEPTIONS.check(classes)
    }
}

4) –¢–æ—á–µ—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥ Spring

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–∞—Å—Ç–æ –ø–æ–ª–µ–∑–Ω–æ:
	‚Ä¢	–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ ¬´–≤–∏–¥–∏—Ç¬ª –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤/—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é:

@ArchTest
fun config_should_not_depend_on_layers() =
    noClasses().that().resideInAPackage("$ROOT.config..")
        .should().accessClassesThat()
        .resideInAnyPackage("$ROOT.controller..", "$ROOT.service..", "$ROOT.repository..")
        .check(classes)

	‚Ä¢	–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã ‚Äî —Ç–æ–ª—å–∫–æ public, –±–µ–∑ @Transactional:

@ArchTest
fun controllers_should_be_public_and_not_transactional() =
    classes().that().resideInAPackage("$ROOT.controller..")
        .should().bePublic()
        .andShould().notBeAnnotatedWith(org.springframework.transaction.annotation.Transactional::class.java)
        .check(classes)

5) –ò—Å–∫–ª—é—á–µ–Ω–∏—è/–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å ¬´—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ¬ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, MapStruct, Lombok-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∑–∞–ø–∏—Å–∏ –º–∏–≥—Ä–∞—Ü–∏–π –∏ —Ç.–¥.):

import com.tngtech.archunit.lang.ConditionEvents
import com.tngtech.archunit.lang.SimpleConditionEvent
import com.tngtech.archunit.lang.ArchCondition

// –ü—Ä–∏–º–µ—Ä: –∏–≥–Ω–æ—Ä —Å–≤—è–∑–µ–π –∫ –∫–ª–∞—Å—Å–∞–º —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º *MapperImpl (MapStruct)
@ArchTest
fun controllers_not_access_repositories_except_mapper_impls() =
    noClasses().that().resideInAPackage("$ROOT.controller..")
        .should(object : ArchCondition<com.tngtech.archunit.core.domain.JavaClass>("–Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º") {
            override fun check(item: com.tngtech.archunit.core.domain.JavaClass, events: ConditionEvents) {
                item.directDependenciesFromSelf
                    .filter { it.targetClass.packageName.startsWith("$ROOT.repository") }
                    .filterNot { it.targetClass.simpleName.endsWith("MapperImpl") }
                    .forEach { dep ->
                        events.add(SimpleConditionEvent.violated(item, "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${item.name} -> ${dep.targetClass.name}"))
                    }
            }
        }).check(classes)

–ü—Ä–æ—â–µ ‚Äî —Å—Ä–∞–∑—É –≤—ã–Ω–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –≤ .ignoreDependency(..,..) —É layeredArchitecture() –∏–ª–∏ resideOutsideOfPackage(...).

6) –ó–∞–ø—É—Å–∫

./gradlew test

–ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ ArchUnit –¥–∞—Å—Ç —á–∏—Ç–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª –∫–æ—Å–Ω—É–ª–æ—Å—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏ –≥–¥–µ –∏–º–µ–Ω–Ω–æ.

7) –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
	‚Ä¢	–í multi-module –ª—É—á—à–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –≤ –∫–∞–∂–¥–æ–º –º–æ–¥—É–ª–µ —Å–æ —Å–≤–æ–∏–º ROOT-–ø–∞–∫–µ—Ç–æ–º –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, ¬´—Å–ª–æ–µ–º¬ª api/application/infrastructure.
	‚Ä¢	–ï—Å–ª–∏ —É —Ç–µ–±—è DDD, —á–∞—Å—Ç–æ —É–¥–æ–±–Ω–æ:
	‚Ä¢	domain ‚Äî –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ Spring;
	‚Ä¢	application (use-cases) ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç domain;
	‚Ä¢	infrastructure ‚Äî –∞–¥–∞–ø—Ç–µ—Ä—ã (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –≤–Ω–µ—à–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã);
	‚Ä¢	web ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã.
–¢–æ–≥–¥–∞ layeredArchitecture() –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥ —ç—Ç–∏ —á–µ—Ç—ã—Ä–µ —Å–ª–æ—è.

‚∏ª

–•–æ—á–µ—à—å ‚Äî —Å–∫–∏–¥—ã–≤–∞–π —Å–≤–æ–π root-–ø–∞–∫–µ—Ç (–∏ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–æ–≤/–º–æ–¥—É–ª–µ–π), —è —Å—Ä–∞–∑—É –ø–æ–¥–≥–æ–Ω—é –ø—Ä–∞–≤–∏–ª–∞ –∏ –¥–æ–±–∞–≤–ª—é –Ω—É–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥ —Ç–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.
